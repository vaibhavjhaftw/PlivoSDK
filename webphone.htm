<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Weekday Webphone (Plivo SDK) - PoC</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body{font-family: Arial, Helvetica, sans-serif; padding:20px;}
    #status{margin-bottom:10px;color:#333;}
    .hidden{display:none;}
    .big{font-size:18px;padding:12px;}
    button{padding:10px 14px;font-size:16px;}
    #log{margin-top:12px;white-space:pre-wrap;background:#f7f7f7;padding:10px;border-radius:6px; height:180px; overflow:auto;}
  </style>
</head>
<body>
  <h2>Weekday Webphone — PoC</h2>
  <div id="status">initializing...</div>

  <div id="loginBox">
    <label>Username: <input id="username" /></label><br/>
    <label>Password: <input id="password" type="password" /></label><br/><br/>
    <button id="btnLogin">Login</button>
  </div>

  <div id="callBox" class="hidden">
    <div>To: <input id="toInput" /></div><br/>
    <div>Caller ID: <input id="callerIdInput" /></div><br/>
    <button id="btnCall">Call</button>
    <button id="btnHangup">Hangup</button>
    <div id="callInfo"></div>
  </div>

  <div id="log">console log...</div>

  <!-- Plivo Browser SDK -->
  <script src="https://cdn.plivo.com/sdk/browser/v2/plivo.min.js"></script>

  <script>
    // ---- small helpers
    function qsel(id){return document.getElementById(id);}
    function log(msg){ qsel('log').textContent = new Date().toLocaleTimeString() + ' • ' + msg + '\n' + qsel('log').textContent; }
    function getParam(k){ const url = new URL(window.location.href); return url.searchParams.get(k); }

    // ---- parse incoming query params
    const autoUser = getParam('username');
    const autoPass = getParam('password');
    const autoTo   = getParam('to');
    const autoCallerId = getParam('callerid');

    // ---- Plivo SDK object
    let plivoBrowserSdk = null;

    function initPhone(){
      // options can be extended if you want; empty is fine for PoC
      const options = {};
      plivoBrowserSdk = new window.Plivo(options);

      // register listeners (subset)
      const client = plivoBrowserSdk.client;
      client.on('onWebrtcNotSupported', ()=>{ qsel('status').innerText='WebRTC not supported'; log('WebRTC not supported'); });
      client.on('onLogin', onLogin);
      client.on('onLoginFailed', (r)=>{ qsel('status').innerText='Login failed: '+JSON.stringify(r); log('Login failed '+JSON.stringify(r)); showLogin(); });
      client.on('onLogout', ()=>{ qsel('status').innerText='Logged out'; showLogin(); });
      client.on('onCalling', ()=>{ qsel('status').innerText='Calling...'; log('Calling...'); });
      client.on('onCallRemoteRinging', ()=>{ qsel('status').innerText='Ringing...'; log('Remote ringing'); });
      client.on('onCallAnswered', ()=>{ qsel('status').innerText='Call answered'; log('Call answered'); });
      client.on('onCallTerminated', ()=>{ qsel('status').innerText='Call ended'; log('Call ended'); });

      log('Plivo SDK initialized');
    }

    // UI helpers
    function showLogin(){ qsel('loginBox').classList.remove('hidden'); qsel('callBox').classList.add('hidden'); }
    function showCallBox(){ qsel('loginBox').classList.add('hidden'); qsel('callBox').classList.remove('hidden'); }

    // login & call
    function doLogin(username, password){
      if(!username || !password){ alert('username/password required'); return; }
      qsel('username').value = username;
      qsel('password').value = password;
      log('Attempting login for '+username);
      plivoBrowserSdk.client.login(username, password);
    }

    function onLogin(){
      log('Logged in');
      showCallBox();
      if(autoTo){
        // fill fields
        qsel('toInput').value = autoTo;
        if(autoCallerId) qsel('callerIdInput').value = autoCallerId;
        // auto-call after a short pause to let UI show
        setTimeout(()=>{ startCall(autoTo, autoCallerId); }, 400);
      }
    }

    function startCall(toNumber, callerId){
      if(!toNumber){ alert('no destination number'); return; }
      qsel('callInfo').innerText = 'Calling ' + toNumber;
      // pass callerid as extra header that server side (if using XML/PHLO) can pick up.
      const extraHeaders = callerId ? { 'X-PH-callerId': callerId } : {};
      plivoBrowserSdk.client.call(toNumber, extraHeaders);
      log('client.call('+toNumber+')');
    }

    function hangup(){
      if(plivoBrowserSdk && plivoBrowserSdk.client && plivoBrowserSdk.client.callSession){
        plivoBrowserSdk.client.hangup();
      }
    }

    // wiring the buttons
    document.addEventListener('DOMContentLoaded', ()=>{
      initPhone();

      qsel('btnLogin').addEventListener('click', ()=>{
        const u = qsel('username').value.trim();
        const p = qsel('password').value.trim();
        doLogin(u, p);
      });

      qsel('btnCall').addEventListener('click', ()=>{
        const to = qsel('toInput').value.trim();
        const cid = qsel('callerIdInput').value.trim();
        startCall(to, cid);
      });

      qsel('btnHangup').addEventListener('click', hangup);

      // If auto credentials supplied via URL, auto login
      if(autoUser && autoPass){
        // fill fields for user visibility
        qsel('username').value = autoUser;
        qsel('password').value = autoPass;
        // do auto login
        setTimeout(()=>{ doLogin(autoUser, autoPass); }, 250);
      } else {
        showLogin();
      }
    });
  </script>
</body>
</html>
