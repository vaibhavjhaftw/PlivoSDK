<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Plivo Webphone — debug build</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body{font-family:Arial,Helvetica,sans-serif;margin:20px;color:#222}
    #status{padding:10px;border-radius:6px;background:#f2f2f2;margin-bottom:12px}
    #diag{white-space:pre-wrap;background:#111;color:#d0f0d0;padding:12px;border-radius:6px;height:220px;overflow:auto}
    #loginBox,.callBox{margin-bottom:12px}
    input{padding:6px;margin:4px 0;width:320px}
    button{padding:8px 12px;margin-right:6px}
    .hidden{display:none}
  </style>
</head>
<body>
  <h3>Plivo Webphone — Debug</h3>
  <div id="status">status: initial</div>

  <div id="loginBox">
    <label>Username: <input id="username" /></label><br/>
    <label>Password: <input id="password" type="password" /></label><br/>
    <button id="btnLogin">Login</button>
  </div>

  <div id="callBox" class="hidden">
    <div>To: <input id="toInput" /></div>
    <div>Caller ID: <input id="callerIdInput" /></div>
    <br/>
    <button id="btnCall">Call</button><button id="btnHangup">Hangup</button>
    <div id="callInfo"></div>
  </div>

  <h4>Diagnostics (visible)</h4>
  <div id="diag">loading diagnostics...</div>

  <!-- Try primary CDN, with a fallback to jsDelivr -->
  <script>
    // small helper to write diagnostics to the page
    function diag(s){
      const el = document.getElementById('diag');
      el.textContent = (new Date().toLocaleTimeString()) + ' • ' + s + '\n' + el.textContent;
      console.log(s);
    }
    document.getElementById('status').innerText = 'status: loading Plivo SDK...';

    // dynamically inject primary CDN, then fallback
    function loadScript(url, onload, onerror){
      const s = document.createElement('script');
      s.src = url;
      s.onload = onload;
      s.onerror = onerror;
      document.head.appendChild(s);
    }

    // Attempt primary CDN then fallback to jsDelivr
    loadScript('https://cdn.plivo.com/sdk/browser/v2/plivo.min.js', 
      ()=>{ diag('Loaded Plivo SDK from CDN (cdn.plivo.com)'); startApp(); },
      ()=>{ diag('Primary CDN failed, trying jsDelivr fallback...'); 
            loadScript('https://cdn.jsdelivr.net/npm/plivo-browser-sdk@2.2.19/dist/plivo.min.js',
              ()=>{ diag('Loaded Plivo SDK from jsDelivr'); startApp(); },
              ()=>{ diag('Both CDN loads failed. Check console / network.'); document.getElementById('status').innerText='ERROR: SDK load failed'; }
            );
      }
    );

    // startApp will run only if plivo SDK is present
    function startApp(){
      document.getElementById('status').innerText = 'status: initializing SDK';
      try{
        if(!window.Plivo){ diag('window.Plivo not available after load.'); return; }
        diag('window.Plivo detected: version (object) present');
        initPhone();
      } catch(e){
        diag('Exception during startApp: ' + e.toString());
        console.error(e);
      }
    }

    // small wrapper of the original init logic
    function initPhone(){
      diag('initPhone() running');
      const options = {};
      try{
        window.plivoBrowserSdk = new window.Plivo(options);
      } catch(e){
        diag('Failed to construct Plivo SDK object: ' + e.toString());
        document.getElementById('status').innerText='ERROR: SDK init failed';
        return;
      }
      const client = window.plivoBrowserSdk.client;
      diag('SDK client object created');

      client.on('onWebrtcNotSupported', ()=>{ diag('event: WebRTC not supported'); document.getElementById('status').innerText='WebRTC not supported'; });
      client.on('onLogin', ()=>{ diag('event: onLogin'); document.getElementById('status').innerText='Logged in'; showCallBox(); });
      client.on('onLoginFailed', (r)=>{ diag('event: onLoginFailed '+JSON.stringify(r)); document.getElementById('status').innerText='Login failed'; showLogin(); });
      client.on('onCalling', ()=>{ diag('event: onCalling'); document.getElementById('status').innerText='Calling...'; });
      client.on('onCallRemoteRinging', ()=>{ diag('event: onCallRemoteRinging'); });
      client.on('onCallAnswered', ()=>{ diag('event: onCallAnswered'); });
      client.on('onCallTerminated', ()=>{ diag('event: onCallTerminated'); document.getElementById('status').innerText='Call ended'; });

      document.getElementById('btnLogin').onclick = function(){
        const u = document.getElementById('username').value.trim();
        const p = document.getElementById('password').value.trim();
        diag('Attempt login for '+u);
        client.login(u, p);
      };
      document.getElementById('btnCall').onclick = function(){
        const to = document.getElementById('toInput').value.trim();
        const caller = document.getElementById('callerIdInput').value.trim();
        diag('Attempting call to '+to+' with callerid='+caller);
        client.call(to, caller ? {'X-PH-callerId': caller} : {});
      };
      document.getElementById('btnHangup').onclick = function(){ try{ client.hangup(); diag('hangup called'); }catch(e){ diag('hangup error '+e); } };

      // handle auto params
      const qp = new URL(window.location.href).searchParams;
      const qUser = qp.get('username');
      const qPass = qp.get('password');
      const qTo   = qp.get('to');
      const qCaller = qp.get('callerid');
      if(qUser) document.getElementById('username').value = qUser;
      if(qPass) document.getElementById('password').value = qPass;
      if(qTo) document.getElementById('toInput').value = qTo;
      if(qCaller) document.getElementById('callerIdInput').value = qCaller;

      document.getElementById('status').innerText = 'status: SDK ready. Login to proceed.';
      diag('initPhone done: SDK ready.');
      showLogin();

      // For debug: auto login if creds present
      if(qUser && qPass){
        diag('Auto login credentials present — auto login triggered (debug mode).');
        setTimeout(()=>{ client.login(qUser, qPass); }, 300);
      }
    }

    function showLogin(){ document.getElementById('loginBox').classList.remove('hidden'); document.getElementById('callBox').classList.add('hidden'); }
    function showCallBox(){ document.getElementById('loginBox').classList.add('hidden'); document.getElementById('callBox').classList.remove('hidden'); }
  </script>
</body>
</html>
